package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertTrue;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.valueObjects.ChefVO;import de.thb.dim.pizzaPronto.valueObjects.DeliveryManVO;import de.thb.dim.pizzaPronto.valueObjects.PersonVO;import de.thb.dim.pizzaPronto.valueObjects.PizzaVO;/** * The methods of the class DeliveryManVO are tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 4.0 33.03.2020 */public class JUnitTestDeliveryManVO {	private static DeliveryManVO deliveryManX, deliveryManY, deliveryManZ;	private static Class<DeliveryManVO> myDeliveryManVOClass;	@BeforeEach	public void initEach() {		deliveryManX = new  DeliveryManVO("DeliveryManVO", "Nachname", "Vorname");		deliveryManY = new  DeliveryManVO(deliveryManX.getPersonnelNo(),deliveryManX.getLastName(), deliveryManX.getFirstName());		deliveryManZ = new  DeliveryManVO(deliveryManX.getPersonnelNo(),deliveryManX.getLastName(), deliveryManX.getFirstName());	}	@Test	@DisplayName("Class has 1 instance attributes, others are inherited")	public void test3Attributes() {		myDeliveryManVOClass = DeliveryManVO.class;		Field[] attributes = myDeliveryManVOClass.getDeclaredFields();		assertEquals(1, attributes.length);	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Attributes are private")	public void testAttributesPrivate() {		myDeliveryManVOClass = DeliveryManVO.class;		Field[] attributes = myDeliveryManVOClass.getDeclaredFields();		int modifiersAttributes;		for (Field f : attributes) {			modifiersAttributes = f.getModifiers();			assertTrue(Modifier.isPrivate(modifiersAttributes));		}	}		@Test	@DisplayName("All Methods are public")	public void testMethodsPublic() {		myDeliveryManVOClass = DeliveryManVO.class;		Method[] methods = myDeliveryManVOClass.getDeclaredMethods();		int modifiersMethods;		for (Method m : methods) {			modifiersMethods = m.getModifiers();			assertTrue(Modifier.isPublic(modifiersMethods));		}	}		@Test	@DisplayName("Default constructor initializes with default values")	public void testDefaultConstructor() {		deliveryManX = new DeliveryManVO();		assertEquals(null, deliveryManX.getLastName());		assertEquals(null, deliveryManX.getFirstName());		assertEquals(null, ((DeliveryManVO) deliveryManX).getLastName());	}		@Test	@DisplayName("Initialization constructor with 3 parameters")	public void testIniConstructor() {		String pNo = "123456";		String lastName = "BBB";		String firstName = "AAA";				deliveryManX = new DeliveryManVO(pNo,lastName,firstName);		assertEquals(lastName, deliveryManX.getLastName());		assertEquals(firstName, deliveryManX.getFirstName());		assertEquals(pNo,  deliveryManX.getPersonnelNo());	}		//Java default opertions		@Test	@DisplayName("equals is tested with null")	public void equalsNull() {				//For any non-null reference value x, x.equals(null) should return false. 		assertFalse(deliveryManX.equals(null),"For any non-null reference value x, x.equals(null) should return false.");	}		@Test	@DisplayName("equals is tested with 2 objects created by default constructor.")	public void equalsDefaultConstructors() {				DeliveryManVO default1, default2;		default1 = new DeliveryManVO();		default2 = new DeliveryManVO();		assertTrue(default1.equals(default2));	}		@Test	@DisplayName("equals is tested with 1 object created by initalizing construct and 1 object created by default construct and.")	public void equalsIniAndDefaultConstructors() {				DeliveryManVO ini, default2;		ini = new DeliveryManVO("E23","Nachname", "Vorname");		default2 = new DeliveryManVO();		assertFalse(ini.equals(default2));	}				@Test	@DisplayName("equals is tested with two equal/similar objects, i.e different adresses and similar attributes. ")	public void equals2EqualObjects() {				assertFalse( deliveryManY == deliveryManX);			assertTrue(deliveryManX.equals(deliveryManY));	}		@Test	@DisplayName("equals is tested with  identical objects. ")	public void equals2IdenticalObjects() {			assertTrue(deliveryManY.equals(deliveryManY));	}		@Test	@DisplayName("equals is tested with three equal objects. Is it reflexive, symmetric and transitive according to the contract ")	public void equals3EqualObjects() {				//It is reflexive: for any non-null reference value x, x.equals(x) should return true. 		assertTrue(deliveryManY.equals(deliveryManY),"It is reflexive: for any non-null reference value x, x.equals(x) should return true. ");				//It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.  		assertTrue(deliveryManX.equals(deliveryManY) == deliveryManY.equals(deliveryManX),"It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. ");					//It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.   		assertTrue((deliveryManX.equals(deliveryManY) && deliveryManY.equals(deliveryManZ)) ? deliveryManX.equals(deliveryManZ): false,"It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. ");		}		@Test	@DisplayName("equals is implemented, only based on personnel number ")	public void testEqualsPersonnelNumber() {		DeliveryManVO deliveryMan = new DeliveryManVO("Bocuse01", "Bocuse", "Bruno");		DeliveryManVO deliveryMan2 = new DeliveryManVO("Bocuse01", "Bocuse", "Britta");				assertTrue(deliveryMan.equals(deliveryMan), "Equals is implemented");		assertTrue(deliveryMan.equals(deliveryMan2), "Equals is implemented, only based on personnel number");		assertTrue(((PersonVO)deliveryMan).equals((PersonVO)deliveryMan2), "Equals is implemented, only based on personnel number of PersonVO");			}		@Test	@DisplayName("equals uses getClass() ")	public void testEqualsGetClass() {		ChefVO chef = new ChefVO("Bocuse01", "Bocuse", "Bruno");		DeliveryManVO deliveryMan = new DeliveryManVO("DeliveryMan01", "Lacy", "Lutz");		assertFalse(chef.equals(deliveryMan), "Equals uses getClass()");		assertFalse(((PersonVO)chef).equals((PersonVO)deliveryMan), "Equals uses getClass()");				}			@Test		@DisplayName("equals is tested different objects from different classes.")		public void equalsDifferentObjectsDifferentClasses() {					assertFalse(deliveryManZ.equals(new PizzaVO()),deliveryManZ.getClass() + " equals is not correct when using objects from differnent class." );	}		@Test	@DisplayName("Simliar objects provide similar hashcode.")	public void hashCodeTest() {				//Simliar objects provide similar hashcode		assertTrue(deliveryManX.equals(deliveryManY) == ( deliveryManX.hashCode() == deliveryManY.hashCode()));		}		@Test	@DisplayName("test toString contains \"Delivery Man\"")	public void toStringTestDeliveryMan() {		DeliveryManVO deliveryMan = new DeliveryManVO();		String actualString = deliveryMan.toString();		assertTrue(actualString.contains("Delivery Man"));	}		@Test	@DisplayName("test toString with driver licence null")	public void toStringTestDriverlicenceNull() {		String pNo="007";		String lastName = "BBB";		String firstName = "AAA";		DeliveryManVO deliveryMan = new DeliveryManVO(pNo,lastName, firstName);				String actualString = deliveryMan.toString();		assertTrue(actualString.contains("Delivery Man"));		assertTrue(actualString.contains(pNo));	    assertTrue(actualString.contains(lastName));	    assertTrue(actualString.contains(firstName));	}		@Test	@DisplayName("test toString: Contains all attributes")	public void toStringTest() {		String pNo="007";		String lastName = "BBB";		String firstName = "AAA";		String driverLicence ="driverLicence";		DeliveryManVO deliveryMan = new DeliveryManVO(pNo,lastName, firstName);		deliveryMan.setDriverLicence(driverLicence);		String actualString = deliveryMan.toString();		assertTrue(actualString.contains(pNo));	    assertTrue(actualString.contains(lastName));	    assertTrue(actualString.contains(firstName));	    assertTrue(actualString.contains(driverLicence));	}				//Setter/Getter		@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter lastname")	public void setGetLastname() {		String lastName = "BBB";		deliveryManX = new DeliveryManVO();		deliveryManX.setLastName(lastName);		assertEquals(lastName, deliveryManX.getLastName());	}		@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter firstname")	public void setGetFirstName() {		String firstName = "BBB";		deliveryManX = new DeliveryManVO();		deliveryManX.setFirstName(firstName);		assertEquals(firstName, deliveryManX.getFirstName());	}		@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter driver licence")	public void setGetColorApron() {		String driverLicence ="driverLicence";		deliveryManX = new DeliveryManVO();		((DeliveryManVO) deliveryManX).setDriverLicence(driverLicence);		assertEquals(driverLicence, ((DeliveryManVO) deliveryManX).getDriverLicence());	}	}