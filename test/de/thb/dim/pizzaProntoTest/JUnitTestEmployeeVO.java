package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.valueObjects.EmployeeVO;/** * The methods of the class EmployeeVO are tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 4.0 27.02.2020 */public class JUnitTestEmployeeVO {	private static Class<EmployeeVO> myEmployeeVOClass;	@BeforeEach	public void initEach() {		myEmployeeVOClass = EmployeeVO.class;	}	@Test	@DisplayName("Class has 3 instance attributes")	public void test3Attributes() {		Field[] attributes = myEmployeeVOClass.getDeclaredFields();		assertEquals(3, attributes.length);	}	@Test	@DisplayName("Information hiding principle and inheritance: Attributes are protected")	public void testAttributesPrivate() {		Field[] attributes = myEmployeeVOClass.getDeclaredFields();		int modifiersAttributes;		for (Field f : attributes) {			modifiersAttributes = f.getModifiers();			assertTrue(Modifier.isProtected(modifiersAttributes));		}	}		@Test	@DisplayName("All Methods are public")	public void testMethodsPublic() {		Method[] methods = myEmployeeVOClass.getDeclaredMethods();		int modifiersMethods;		for (Method m : methods) {			modifiersMethods = m.getModifiers();			assertTrue(Modifier.isPublic(modifiersMethods));		}	}		@Test	@DisplayName("EmployeeVO has a default constructor and an intialization constructor with 3 parameters")	public void testDefaultConstructor() {		Constructor[] constructors = myEmployeeVOClass.getConstructors();		int modifiersConstructor;		for (Constructor c : constructors) {			Class[] parameterTypes = c.getParameterTypes();			assertTrue(parameterTypes.length == 0 || parameterTypes.length == 3);		}	}	}