package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertTrue;import java.awt.Color;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.time.LocalDate;import java.time.format.DateTimeFormatter;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.businessObjects.Delivery;import de.thb.dim.pizzaPronto.businessObjects.IService;import de.thb.dim.pizzaPronto.businessObjects.Kitchen;import de.thb.dim.pizzaPronto.businessObjects.Ordering;import de.thb.dim.pizzaPronto.controller.IOrdering;import de.thb.dim.pizzaPronto.valueObjects.ChefVO;import de.thb.dim.pizzaPronto.valueObjects.CustomerVO;import de.thb.dim.pizzaPronto.valueObjects.DeliveryManVO;import de.thb.dim.pizzaPronto.valueObjects.DessertVO;import de.thb.dim.pizzaPronto.valueObjects.DishVO;import de.thb.dim.pizzaPronto.valueObjects.EmployeeVO;import de.thb.dim.pizzaPronto.valueObjects.Gender;import de.thb.dim.pizzaPronto.valueObjects.PastaVO;import de.thb.dim.pizzaPronto.valueObjects.PersonVO;import de.thb.dim.pizzaPronto.valueObjects.PizzaVO;import de.thb.dim.pizzaPronto.valueObjects.exceptions.CustomerNoDateOfBirthException;import de.thb.dim.pizzaPronto.valueObjects.exceptions.CustomerTooYoungException;/** * The Hierarchy of inheritance is tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 2.0 10.04.2020 */public class JUnitTestHierarchyOfInheritance {		private static Class<PersonVO> myPersonVOClass;	private static int modifiersPersonVO; 		private static Class<CustomerVO> myCustomerVOClass; 	private static Class<EmployeeVO> myEmployeeClass;	private static int modifiersEmployeeVO; 			private static  EmployeeVO deliveryMan;		private static Class<IOrdering> myIOrdering;	private static int modifiersIOrdering; 		private static Class<IService> myIService;	private static int modifiersIService; 	private static  Ordering ordering;	private static  Kitchen kitchen;	private static  Delivery delivery;	private static Class<DishVO> myDishVOClass;	private static int modifiersDishVO; 		private static  DishVO dessert, pizza, pasta;		private static Method getNameOfDish;	private static int modifiersgetNameOfDish;	private static Method getNumberOfDish;	private static int modifiersgetNumberOfDish;	private static Method getName;	private static int modifiersgetName;	private static Method getNumber;	private static int modifiersgetNumber;		@BeforeAll	public static void initOnce() throws NoSuchFieldException, SecurityException, NoSuchMethodException{			myEmployeeClass = EmployeeVO.class;		myCustomerVOClass = CustomerVO.class;				myPersonVOClass = PersonVO.class;		modifiersPersonVO = myPersonVOClass.getModifiers();				deliveryMan = new DeliveryManVO();					myDishVOClass = DishVO.class;		modifiersDishVO= myDishVOClass .getModifiers();						modifiersEmployeeVO= EmployeeVO.class.getModifiers();				dessert = new DessertVO();		pizza = new PizzaVO();		pasta = new PastaVO();				getNameOfDish = myDishVOClass.getMethod( "getNameOfDish" );		modifiersgetNameOfDish = getNameOfDish.getModifiers();				getNumberOfDish = myDishVOClass.getMethod( "getNumberOfDish" );		modifiersgetNumberOfDish = getNumberOfDish.getModifiers();				getName = myDishVOClass.getMethod( "getName" );		modifiersgetName = getName.getModifiers();				getNumber = myDishVOClass.getMethod( "getNumber" );		modifiersgetNumber = getNumber.getModifiers();				myIOrdering = IOrdering.class;		modifiersIOrdering= myIOrdering.getModifiers();				ordering = new Ordering();				myIService = IService.class;		modifiersIService= myIService.getModifiers();				kitchen = new Kitchen();		delivery = new Delivery();			}	@Test	@DisplayName("test PersonVO is abstract")	public void testPersonVOIsAbstract() {		assertTrue( Modifier.isAbstract(modifiersPersonVO),"PersonVO is abstract");	}		@Test	@DisplayName("test EmployeeVO  is abstract")	public void testEmployeeVOIsAbstract() {		assertTrue( Modifier.isAbstract(modifiersEmployeeVO ),"EmployeeVO  is abstract");	}		@Test	@DisplayName("test EmployeeVO has super class PersonVO")	public void testEmployeeSuperClassPersonVO() {		assertTrue(myEmployeeClass.getSuperclass().toString().equals("class de.thb.dim.pizzaPronto.valueObjects.PersonVO"),"EmployeeVO is a PersonVO");	}		@Test	@DisplayName("test CustomerVO has super class PersonVO")	public void testCusotmerVOClassPersonVO() {		assertTrue(myCustomerVOClass.getSuperclass().toString().equals("class de.thb.dim.pizzaPronto.valueObjects.PersonVO"),"EmployeeVO is a PersonVO");	}		@Test	@DisplayName("test ChefVO has super classes PersonVO and EmployeeVO")	public void testChefVOSuperClasses() {		ChefVO chef = new ChefVO("Bocuse01", "Bocuse", "Bruno");		assertTrue( chef instanceof ChefVO, "ChefVO is a ChefVO");		assertTrue( chef instanceof EmployeeVO,"ChefVO is a  EmployeeVO");		assertTrue( chef instanceof PersonVO,"ChefVO is a  PersonVO");	}		@Test	@DisplayName("test ChefVO has attributes inherited and not overridden")	public void testChefVOAttributesInherited() {		ChefVO chef = new ChefVO("Bocuse01", "Bocuse", "Bruno");		assertEquals(chef.getLastName(),"Bocuse", "Last name is set.");		assertEquals(((EmployeeVO)chef).getLastName(),"Bocuse", "Last name is inherited from EmployeeVO.");		assertEquals(((PersonVO)chef).getLastName(),"Bocuse", "Last name is inherited from PersonVO.");		assertEquals(chef.getFirstName(),"Bruno", "First name is set.");		assertEquals(((EmployeeVO)chef).getFirstName(),"Bruno", "First name is inherited from EmployeeVO.");		assertEquals(((PersonVO)chef).getFirstName(),"Bruno", "First name is inherited from PersonVO.");			}		@Test	@DisplayName("test CustomerVO has attributes inherited and not overridden")	public void testCustomerVOAttributesInherited() throws NullPointerException, CustomerTooYoungException {		CustomerVO 	customer = new CustomerVO("Nachname", "Vorname", LocalDate.of(1990, 5, 31));		assertEquals(customer.getLastName(),"Nachname", "Last name is set.");		assertEquals(((PersonVO)customer).getLastName(),"Nachname", "Last name is inherited from PersonVO.");		assertEquals(customer.getFirstName(),"Vorname", "First name is set.");		assertEquals(((PersonVO)customer).getFirstName(),"Vorname", "First name is inherited from PersonVO.");			}		@Test	@DisplayName("test toString of CustomerVO calls toString of super class")	public void testCustomerVOToString() throws NullPointerException, CustomerTooYoungException, CustomerNoDateOfBirthException {		String lastName = "BBB";		String firstName = "AAA";		String street = "road";		int number = 66;		Gender gender = Gender.U;		int year = 1988;		int month = 6;		int day = 18;		LocalDate dateOfBirth = LocalDate.of(year, month, day);		CustomerVO customer = new CustomerVO(lastName, firstName,street,number, gender, dateOfBirth);				String personString = ((PersonVO)customer).toString();				String actualString = customer.toString();		 	    assertTrue(personString.contains(lastName));	    assertTrue(personString.contains(firstName));	    assertTrue(personString.contains(street));	    assertTrue(personString.contains(String.valueOf(number)));	    assertTrue(actualString.contains(gender.toString()));	    assertTrue(actualString.contains(customer.getDateOfBirth().format(DateTimeFormatter.ofPattern("dd MMM yyyy"))));	    assertTrue(actualString.contains(String.valueOf(customer.getId())));	    assertTrue(actualString.contains(String.valueOf(customer.calculateAge())));	    assertFalse(customer.hasOrder());	}		@Test	@DisplayName("test toString of ChefVO calls toString of super class")	public void testChefVOToString() {		ChefVO chef = new ChefVO("Bocuse01", "Bocuse", "Bruno");		assertTrue(chef.toString().contains("Bocuse01"), "ToString contains personnel number.");		assertTrue(chef.toString().contains("Bocuse"), "ToString contains last name.");		assertTrue(chef.toString().contains("Bruno"), "ToString contains first name.");		assertTrue(((EmployeeVO)chef).toString().contains("Bocuse"), "ToString contains last name.");		assertTrue(((EmployeeVO)chef).toString().contains("Bruno"), "ToString contains first name.");	}		@Test	@DisplayName("test ChefVO has the specality - an apron")	public void testChefVOArpon() {		ChefVO chef = new ChefVO("Bocuse01", "Bocuse", "Bruno");		chef.setColorApron(Color.GREEN);		assertEquals(chef.getColorApron(),Color.GREEN, "Color of Apron has setter and getter.");	}		@Test	@DisplayName("test DeliveryManVO has super classes PersonVO and EmployeeVO")	public void testDeliveryManVOSuperClass() {		assertTrue( deliveryMan instanceof DeliveryManVO, "DeliveryManVO is a DeliveryManVO");		assertTrue( deliveryMan instanceof EmployeeVO,"DeliveryManVO is a  EmployeeVO");		assertTrue( deliveryMan instanceof PersonVO,"DeliveryManVO is a  PersonVO");	}		@Test	@DisplayName("test toString of DeliveryManVO calls toString of super classes")	public void testDeliveryManVOToString() {		DeliveryManVO deliveryMan = new DeliveryManVO("Lacy01", "Lacy", "Lutz");		assertEquals(deliveryMan.getPersonnelNo(),"Lacy01", "Personnell number is set.");		assertTrue(deliveryMan.toString().contains("Lacy01"), "ToString contains personnel number.");		assertEquals(deliveryMan.getLastName(),"Lacy", "Last name is set.");		assertEquals(((EmployeeVO)deliveryMan).getLastName(),"Lacy", "Last name is inherited from EmployeeVO.");		assertEquals(((PersonVO)deliveryMan).getLastName(),"Lacy", "Last name is inherited from PersonVO.");		assertTrue(deliveryMan.toString().contains("Lacy"), "ToString contains last name.");		assertEquals(deliveryMan.getFirstName(),"Lutz", "Last name is set.");		assertEquals(((EmployeeVO)deliveryMan).getFirstName(),"Lutz", "First name is inherited from EmployeeVO.");		assertEquals(((PersonVO)deliveryMan).getFirstName(),"Lutz", "First name is inherited from PersonVO.");		assertTrue(deliveryMan.toString().contains("Lutz"), "ToString contains first name.");			}		@Test	@DisplayName("test DeliveryManVO has the specality - a driver licence")	public void testDeliveryManVODriverLicence() {		DeliveryManVO deliveryMan = new DeliveryManVO("Lacy01", "Lacy", "Lutz");		deliveryMan.setDriverLicence("DriverLicence A");		assertEquals(deliveryMan.getDriverLicence(),"DriverLicence A", "Driver licence has setter and getter.");	}		//DishVO		@Test	@DisplayName("test DishVO is abstract")	public void testDishVOIsAbstract() {			assertTrue( Modifier.isAbstract(modifiersDishVO),"DishVO is abstract" );	}			@Test	@DisplayName("test the methode getNameOfDish of  DishVO  is abstract")	public void testDishVOGetDishNameIsAbstract() {			assertTrue( Modifier.isAbstract(modifiersgetNameOfDish),"Methode getNameOfDish is abstract");	}		@Test	@DisplayName("test the methode getNumberOfDish of  DishVO  is abstract")	public void testDishVOGetDishNumberIsAbstract() {			assertTrue(Modifier.isAbstract(modifiersgetNumberOfDish),"Methode getNumberOfDish is abstract");	}	@Test	@DisplayName("test the methode getName of  DishVO isn't  abstract")	public void testDishVOGetNameIsNotAbstract() {			assertFalse(Modifier.isAbstract(modifiersgetName),"Methode getName isn't abstract");	}		@Test	@DisplayName("test the methode getNumber of  DishVO  isn't  abstract")	public void testDishVOGetNumberIsNotAbstract() {			assertFalse( Modifier.isAbstract(modifiersgetNumber),"Methode getNumber isn't  abstract");	}		@Test	@DisplayName("test DessertVO is a DessertVO and DessertVO is a DishVO")	public void testDessertVOSuperClass() {		assertTrue( dessert instanceof DessertVO,"DessertVO is a DessertVO");		assertTrue( dessert instanceof DishVO,"DessertVO is a DishVO");	}		@Test	@DisplayName("test PizzaVO is a PizzaVO and PizzaVO is a DishVO")	public void testPizzaVOSuperClass() {		assertTrue( pizza instanceof PizzaVO,"PizzaVO is a PizzaVO");		assertTrue( pizza instanceof DishVO,"PizzaVO is a PizzaVO");	}		@Test	@DisplayName("test PastaVO is a PastaVO and PastaVO is a DishVO")	public void testPastaVOSuperClass() {		assertTrue( pasta instanceof PastaVO,"PastaVO is a PastaVO");		assertTrue( pasta instanceof DishVO,"PastaVO is a DishVO");	}		@Test	@DisplayName("test IOrdering is Interface")	public void testIOrderingisInterface() {			assertTrue( Modifier.isInterface(modifiersIOrdering),"IOrdering is Interface");	}		@Test	@DisplayName("test IService is Interface")	public void testIServiceisInterfaceIService() {			assertTrue( Modifier.isInterface(modifiersIService),"IService is Interface");	}		@Test	@DisplayName("test IOrdering has 8 Methods")	public void testIOrderingMethods() {		Method[] methods = myIOrdering.getDeclaredMethods();		assertEquals(8,methods.length);	}		@Test	@DisplayName("test Ordering is a IOrdering")	public void testOrderingHasSuperClassIOrdering() {		assertTrue( ordering instanceof IOrdering,"Ordering is a IOrdering");	}		@Test	@DisplayName("test Kitchen is a IService")	public void testKitchenHasSuperClassIService() {		assertTrue( kitchen instanceof IService,"Kitchen is a IService");	}		@Test	@DisplayName("test IService has 1 method")	public void testIServiceMethods() {		Method[] methods = myIService.getDeclaredMethods();		assertTrue(1 == methods.length);	}		@Test	@DisplayName("test Delivery is a IService")	public void testDeliveryHasSuperClassIService() {		assertTrue( delivery instanceof IService,"Delivery is a IService");	}		}