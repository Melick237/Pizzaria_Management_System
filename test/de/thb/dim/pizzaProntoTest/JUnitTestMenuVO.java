package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertNotNull;import static org.junit.jupiter.api.Assertions.assertTrue;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.valueObjects.MenuVO;/** * DishVO, PastaVO, PizzaVO and Dessert are tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 2.0 02.04.2020 */public class JUnitTestMenuVO {	private static Class<MenuVO> myMenuClass;	private static Field dishes;	private static Method initMenu;	private static int modifiersInitMenu;	@BeforeAll	public static void initOnce() throws NoSuchFieldException, SecurityException, NoSuchMethodException {		myMenuClass = MenuVO.class;		dishes = myMenuClass.getDeclaredField("dishes");		initMenu = myMenuClass.getDeclaredMethod("initMenu");		modifiersInitMenu = initMenu.getModifiers();	}	@Test	@DisplayName("Methode initMenu of menuVO is private.")	public void testInitMenuIsPrivate() throws NoSuchMethodException {		assertTrue(Modifier.isPrivate(modifiersInitMenu), "Methode initMenu of menuVO is private");	}	@Test	@DisplayName("No number of dishes")	public void testMenuVONoNUMBER_OF_DISHES() {		Assertions.assertThrows(NoSuchFieldException.class, () -> {			myMenuClass.getDeclaredField("NUMBER_OF_DISHES");		});	}	@Test	@DisplayName("Dishes in MenuVO is type DishVO")	public void testMenuVODishesDataType() {		assertTrue(dishes.getType().toString().equals("interface java.util.List"), "dishes in MenuVO is type DishVO");	}	@Test	@DisplayName("Dishes are initialized")	public void testMenuVOgetDish() {		MenuVO menu = new MenuVO();		for (int i = 0; i < menu.getNumberOfDishes(); i++)			assertNotNull(menu.getDish(i), "Dishes are initialized");	}	@Test	@DisplayName("getDishIndex throws IndexOutOfBoundsException if index is too high")	public void getDishIndexTooHighIndexOutOfBoundsException() {		MenuVO menu = new MenuVO();		int i = menu.getNumberOfDishes();		Assertions.assertThrows(IndexOutOfBoundsException.class, () -> menu.getDish(i + 1));	}}