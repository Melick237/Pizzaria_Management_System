package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertNotEquals;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import java.util.List;import java.lang.reflect.Field;import java.lang.reflect.Modifier;import java.time.LocalDate;import java.time.LocalDateTime;import java.util.LinkedList;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.valueObjects.CustomerVO;import de.thb.dim.pizzaPronto.valueObjects.DessertVO;import de.thb.dim.pizzaPronto.valueObjects.DishVO;import de.thb.dim.pizzaPronto.valueObjects.Gender;import de.thb.dim.pizzaPronto.valueObjects.MenuVO;import de.thb.dim.pizzaPronto.valueObjects.OrderVO;import de.thb.dim.pizzaPronto.valueObjects.PastaVO;import de.thb.dim.pizzaPronto.valueObjects.PizzaVO;import de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO;import de.thb.dim.pizzaPronto.valueObjects.exceptions.CustomerTooYoungException;/** * EmployeeVO and work are tested. *  * Requirement: OrderVO is ok *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 3.0 05.05.2020 */public class JUnitTestOrderVO {	private static Class<OrderVO> myOrderClass;	private static OrderVO myOrder;		private static CustomerVO customer;		private static Field shoppingBasket;		private static MenuVO menu;			@BeforeAll	public static void initOnce() throws NoSuchFieldException, SecurityException {		myOrderClass = OrderVO.class;		shoppingBasket = myOrderClass.getDeclaredField("shoppingBasket");				 menu = new MenuVO();	}		@BeforeEach	public void initEach() throws NullPointerException, CustomerTooYoungException {						// create customer		customer = new CustomerVO("Genuss", "Gini", "Haribo street", 7,Gender.F, LocalDate.of(1995, 8, 8));		// create order		myOrder = new OrderVO(1,StateOfOrderVO.STARTED, LocalDateTime.now(), customer);		customer.setOrder(myOrder);	}	// OrderVO		@Test	@DisplayName("Default Constructor sets state \"StateOfOrderVO.STARTED\"")	public void testConstructor() {			assertEquals(StateOfOrderVO.STARTED,myOrder.getState());	}		@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): All Attributes are private")	public void testAttributesPrivate() {		Field[] attributes = myOrderClass.getDeclaredFields();		int modifiersAttributes;		for (Field f : attributes) {			modifiersAttributes = f.getModifiers();			assertTrue(Modifier.isPrivate(modifiersAttributes));		}	}		@Test	@DisplayName("Class has 7 attributes")	public void test7Attributes() {		Field[] attributes = myOrderClass.getDeclaredFields();		assertEquals(7, attributes.length);	}		@Test	@DisplayName("test datatype of shoppingBasket is interface java.util.List")	public void testShoppingBasketDataType() {		assertTrue(shoppingBasket.getType().toString().equals("interface java.util.List"),				"shoppingBasket in OrderVO is an array of type DishVO");	}		@Test	@DisplayName("addDish: one pizzas is added and number of dishes is 1")	public void addDishOneDish() {		// add a dish 		myOrder.addDish(menu.getDish(0));		assertEquals(1, myOrder.getNumberOfDishes(), "Number of dishes in OrderVO: 1");	}	@Test	@DisplayName("addDish: a number of dishes is added.")	public void addDishAllDishes() {				// add all dishes of pizzen and more				for (int i = 0; i < menu.getNumberOfDishes(); i++) {					myOrder.addDish( menu.getDish(i));				}		for (int i = 0; i < myOrder.getNumberOfDishes(); i++) {			assertEquals(					myOrder.getDish(i),  menu.getDish(i), "Dishes in OrderVO equal the given dishes");		}	}	@Test	@DisplayName("Calculates total price correctly for MAX_DISHES.")	public void testOrderVOCalculateTotalPriceMAX_DISHES() {		float price = 7.00f;		// add dishes		for (int i = 0; i < menu.getNumberOfDishes(); i++) {			myOrder.addDish(					new PizzaVO(30, "Popeye", new String[] { "Schinken", "Spinat", "Champignon", "Ei" }, price, 1));		}		assertTrue((price * menu.getNumberOfDishes()) == myOrder.calculatePriceDishes(),				" price is calculated correctly ");	}		@Test	@DisplayName("Calculates total price correctly for 3 dishes.")	public void testOrderVOCalculateTotalPrice3Dishes() {		float price1 = 7.00f;		float price2 = 7.03f;		float price3 = 5.05f;		// add dishes					myOrder.addDish(					new PizzaVO(30, "Popeye", new String[] { "Schinken", "Spinat", "Champignon", "Ei" }, price1, 1));			myOrder.addDish(					new PastaVO(30, "BBB", new String[] { "Sahne", "Ei" }, price2, 6));			myOrder.addDish(					new DessertVO(30, "Dessert", price3));				assertTrue((price1 + price2 +price3) == myOrder.calculatePriceDishes(),				" price is calculated correctly ");	}	@Test	@DisplayName("deleteDish throws IndexOutOfBoundsException if index is negative")	public void deleteDishOneTooMuch() {		Assertions.assertThrows(IndexOutOfBoundsException.class, () -> 		myOrder.deleteDish(-1));	}	@Test	@DisplayName("getDish with wrong index")	public void getDishWithWrongIndex() {		Assertions.assertThrows(java.lang.IndexOutOfBoundsException.class, () ->		myOrder.getDish(10000));	}		@Test	@DisplayName("getDish with no dish throws IndexOutOfBoundsException")	public void getDishWithNoDishAtIndex() {		Assertions.assertThrows(IndexOutOfBoundsException.class, () -> 		myOrder.deleteDish(0));	}		@Test	@DisplayName("getDish for a certain index is ok")	public void getDishTest() {		DishVO dessert = new DessertVO();		myOrder.addDish(dessert);		assertEquals(myOrder.getDish(0), dessert);	}		//Java standards operations		@Test	@DisplayName("equals is tested with null")	public void equalsNull() {				//For any non-null reference value x, x.equals(null) should return false. 		assertFalse(myOrder.equals(null),"For any non-null reference value x, x.equals(null) should return false.");	}	//Java standard operations	@Test	@DisplayName("equals with identical objects")	public void equalsIdentical() {		OrderVO otherOrder = myOrder; // Identit√§t		assertEquals(myOrder, otherOrder, "objects are identical");	}		@Test	@DisplayName("equals with objects with the different oderNos")	public void equalsObjectsWithDifferentOderNo() {		OrderVO otherOrder = new OrderVO(2,StateOfOrderVO.STARTED,myOrder.getTimestampStartedOrder(),myOrder.getCustomer()); //identical because of orderNo		// add all 18 dishes		for (int i = 0; i < menu.getNumberOfDishes(); i++) {			myOrder.addDish(menu.getDish(i));			otherOrder.addDish(menu.getDish(i));		}		assertNotEquals(myOrder, otherOrder);	}			@Test	@DisplayName("equals with objects with the same oderNo and different shopping baskes")	public void equalsObjectsWithSameOderNo() {		OrderVO otherOrder = new OrderVO(1,StateOfOrderVO.STARTED,myOrder.getTimestampStartedOrder(),myOrder.getCustomer()); //identical because of orderNo		// add all 18 dishes		for (int i = 0; i < menu.getNumberOfDishes() - 1; i++) {			myOrder.addDish(menu.getDish(i));			otherOrder.addDish(menu.getDish(i));		}		assertEquals(myOrder, otherOrder);	}		@Test	@DisplayName("equals with identical objects and refilled shoppingbasket")	public void equalsRefilledShoppingBasekt() {		OrderVO otherOrder = myOrder; //identical because of orderNo		// add all 18 dishes 		for (int i = 0; i < menu.getNumberOfDishes(); i++) {			myOrder.addDish(menu.getDish(i));			otherOrder.addDish(menu.getDish(i));		}		assertEquals(myOrder, otherOrder, " OrderVO equals new OrderVO");	}		@Test	@DisplayName("equals is tested different objects from different classes.")	public void equalsDifferentObjectsDifferentClasses() {		assertFalse(myOrder.equals(new PizzaVO()),myOrder.getClass() + " equals is not correct when using objects from differnent class." );}		@Test	@DisplayName("Simliar objects provide similar hashcode.")	public void hashCodeTest() {		OrderVO otherOrder = myOrder;		//Simliar objects provide similar hashcode		assertTrue(myOrder.equals(otherOrder) == ( myOrder.hashCode() == otherOrder.hashCode()));		}			@Test	@DisplayName("ToString() does not contains empty elements of shopping baskets, i.e. null.")	public void toStringNoEmptyElements() {		myOrder.addDish(menu.getDish(0));		myOrder.setTimestampDeliveredOrder(LocalDateTime.now());		String s = myOrder.toString();		assertFalse(s.contains("null"), "ToString() does not contains empty elements of shopping baskets, i.e. null.");	}		@Test	@DisplayName("ToString() does not contains empty elements of shopping baskets, although null was added twice.")	public void toStringNoEmptyElementsBuitIndexIncreased() {		myOrder.addDish(menu.getDish(0));		myOrder.addDish(null);		myOrder.addDish(null);		myOrder.setTimestampDeliveredOrder(LocalDateTime.now());		String s = myOrder.toString();		assertFalse(s.contains("null"), "ToString() does not contains empty elements of shopping baskets, i.e. null.");	}		@Test	@DisplayName("ToString() does not contains shopping baskets,because it is null.")	public void toStringShoppingbasketsNull() {		String s = myOrder.toString();;		assertFalse(s.contains("PizzaVO"), "ToString() does not contains shopping baskets,because it is null.");	}			//Setter/Getter		@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter  timestampStartedOrder")	public void setGetTimestampStartedOrder() {		LocalDateTime timestamp = LocalDateTime.now();		myOrder.setTimestampStartedOrder(timestamp);		assertEquals(timestamp,myOrder.getTimestampStartedOrder());	}		@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter  timestampStartedOrder")	public void setGetTimestampDeliveredOrder() {		LocalDateTime timestamp = LocalDateTime.now();		myOrder.setTimestampDeliveredOrder(timestamp);		assertEquals(timestamp,myOrder.getTimestampDeliveredOrder());	}		@Test	@DisplayName("Information hiding principle (Geheimnisprinzip):Setter/getter shoppingBasket")	public void setGetShopping() {		List<DishVO> myList = new LinkedList<DishVO>();		for (int i = 0; i < menu.getNumberOfDishes(); i++) {			 myList.add(menu.getDish(i));		}		myOrder.setShoppingBasket(myList);		assertEquals(myList,myOrder.getShoppingBasket());	}		@Test	@DisplayName("Information hiding principle (Geheimnisprinzip):Setter/getter state")	public void setGetState() {		myOrder.setState(StateOfOrderVO.FINISHED);		assertEquals(StateOfOrderVO.FINISHED,myOrder.getState());	}	}