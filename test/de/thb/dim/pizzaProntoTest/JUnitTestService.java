package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertNotNull;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import org.junit.platform.commons.support.ReflectionSupport;import de.thb.dim.pizzaPronto.businessObjects.Delivery;import de.thb.dim.pizzaPronto.businessObjects.IService;import de.thb.dim.pizzaPronto.businessObjects.Kitchen;import de.thb.dim.pizzaPronto.businessObjects.exceptions.NoCustomerException;import de.thb.dim.pizzaPronto.valueObjects.CustomerVO;import de.thb.dim.pizzaPronto.valueObjects.EmployeeVO;import de.thb.dim.pizzaPronto.valueObjects.Gender;import de.thb.dim.pizzaPronto.valueObjects.OrderVO;import de.thb.dim.pizzaPronto.valueObjects.StateOfOrderVO;import de.thb.dim.pizzaPronto.valueObjects.exceptions.CustomerTooYoungException;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.time.LocalDate;import java.time.LocalDateTime;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;/** * EmployeeVO and work are tested. *  * Requirement: OrderVO and menuVO are ok *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 2.0 05.05.2020 */public class JUnitTestService {	private static OrderVO myOrder;	private static OrderVO myOrderWithoutCustomer;	private static IService[] services = new IService[2];	private static CustomerVO customer;		private static Class<Delivery> myDeliveryClass;	private static Method selectEmployee;	private static int modifiersSelectEmployee;		@BeforeEach	public void initEach() throws NoSuchFieldException, NullPointerException, CustomerTooYoungException {		int year, number;		// create chef		services[0] = new Kitchen();		// create delivery man		services[1] = new Delivery();		// create customer		customer = new CustomerVO("Genuss", "Gini", "HaribostraÃŸe", 32, Gender.F , LocalDate.of(1995, 8, 8));		// create order		year = LocalDate.now().getYear();		number = year * 100000 + 1;		myOrder = new OrderVO(number, StateOfOrderVO.STARTED, LocalDateTime.now(), customer);		customer.setOrder(myOrder);		myOrderWithoutCustomer = new OrderVO(number, StateOfOrderVO.STARTED, LocalDateTime.now(), null);	}	// Services	@Test	@DisplayName("test kitchen with order is StateOfOrderVO.CONFIRMED and with customer")	public void testKitchenWithOrderConfirmedWithCustomer() throws IllegalStateException, NullPointerException, NoCustomerException {		myOrder.setState(StateOfOrderVO.CONFIRMED);		services[0].startService(myOrder);		assertEquals(StateOfOrderVO.READY, myOrder.getState(), "state of order changed to ready");	}		@Test	@DisplayName("test kitchen with order is StateOfOrderVO.CONFIRMED text of output is correct")	public void testKitchenWithOrderConfirmedCompleteText() {		myOrder.setState(StateOfOrderVO.CONFIRMED);		String personnelNumber;		Kitchen k = (Kitchen) services[0];		String s = k.startService(myOrder);		assertTrue(s.contains("Order is ready."), "Order is ready.");		assertTrue(s.contains("Service of ChefVO"), "Service of ChefVO");		personnelNumber = (k.getEmployees())[0].getPersonnelNo();		assertTrue(s.contains(personnelNumber), "Service of ChefVO with personnel number");		assertEquals(StateOfOrderVO.READY, myOrder.getState(), "state of order is ready");			}	@Test	@DisplayName("test kitchen with order is StateOfOrderVO.CONFIRMED without customer")	public void testKitchenWithoutCustomer() throws IllegalStateException, NullPointerException, NoCustomerException {		myOrderWithoutCustomer.setState(StateOfOrderVO.CONFIRMED);		assertTrue(services[0].startService(myOrderWithoutCustomer).contains("Order is ready."), "Order is ready.");		assertEquals(StateOfOrderVO.READY, myOrderWithoutCustomer.getState(), "state of order is StateOfOrderVO.READY");	}	@Test	@DisplayName("test kitchen with order is StateOfOrderVO.STARTED")	public void testKitchenWithOrderStarted() throws IllegalStateException, NullPointerException, NoCustomerException {		Exception exception = Assertions.assertThrows(IllegalStateException.class,				() -> services[0].startService(myOrder));		assertTrue(exception.getMessage().contains("No order for processing available."));		assertTrue(exception.getMessage().contains("Service of ChefVO"));		assertEquals(StateOfOrderVO.STARTED, myOrder.getState(), "state of order remains started");	}	@Test	@DisplayName("test kitchen without order")	public void testKitchenWithoutOrder() throws IllegalStateException, NullPointerException, NoCustomerException {				Exception exception = Assertions.assertThrows(NullPointerException.class,				() -> services[0].startService(null));		assertTrue(exception.getMessage().contains("No order available."));		assertTrue(exception.getMessage().contains("Service of ChefVO"));		assertEquals(StateOfOrderVO.STARTED, myOrder.getState(), "state of order remains started");	}	@Test	@DisplayName("test kitchen with order is started without customer")	public void testKitchenWithOrderStartedWithoutCustomer() throws IllegalStateException, NullPointerException, NoCustomerException {		StateOfOrderVO  state = myOrderWithoutCustomer.getState();		Exception exception = Assertions.assertThrows(IllegalStateException.class,				() -> services[0].startService(myOrderWithoutCustomer));		assertTrue(exception.getMessage().contains("No order for processing available."));		assertTrue(exception.getMessage().contains("Service of ChefVO"));		assertEquals(state, myOrderWithoutCustomer.getState(), "state of order remains started");	}	@Test	@DisplayName("test delivery with order is StateOfOrderVO.READY with customer")	public void testDeliveryWithOrderReadyWithCustomer() throws IllegalStateException, NullPointerException, NoCustomerException {		String test;		myOrder.setState(StateOfOrderVO.READY);		test = services[1].startService(myOrder);		assertTrue(test.contains("Order is delivered on"), "Delivery: Order is delivered on");		assertEquals(StateOfOrderVO.DELIVERED, myOrder.getState(), "state of order changed to StateOfOrderVO.DELIVERED");	}	@Test	@DisplayName("test delivery with order is StateOfOrderVO.READY without customer")	public void testDeliveryWithOrderReadyWithoutCustomer() throws IllegalStateException, NullPointerException, NoCustomerException {				myOrderWithoutCustomer.setState(StateOfOrderVO.READY);				myOrder.setState(StateOfOrderVO.CONFIRMED);		Exception exception = Assertions.assertThrows(NoCustomerException.class,				() -> services[1].startService(myOrderWithoutCustomer));		assertTrue(exception.getMessage().contains("No customer available."));		assertTrue(exception.getMessage().contains("Service of DeliveryManVO"));		assertEquals(StateOfOrderVO.READY, myOrderWithoutCustomer.getState(), "state of order changed to StateOfOrderVO.DELIVERED");	}	@Test	@DisplayName("test delivery with order is StateOfOrderVO.CONFIRMED without customer")	public void testKitchenWithOrderConfirmedWithoutCustomer() throws IllegalStateException, NullPointerException, NoCustomerException {		String test;		myOrder.setState(StateOfOrderVO.CONFIRMED);		test = services[0].startService(myOrder);		assertTrue(test.contains("Order is ready"), "Kitchen: Order is ready.");		assertEquals(StateOfOrderVO.READY, myOrder.getState(), "state of order changed to StateOfOrderVO.READY");	}	@Test	@DisplayName("test delivery without order")	public void testDeliveryWithoutOrder() throws IllegalStateException, NullPointerException, NoCustomerException {						Exception exception = Assertions.assertThrows(NullPointerException.class,				() -> services[1].startService(null));		assertTrue(exception.getMessage().contains("No order available."));		assertTrue(exception.getMessage().contains("Service of DeliveryManVO"));		assertEquals(StateOfOrderVO.STARTED, myOrder.getState(), "state of order remains started");	}	@Test	@DisplayName("test delivery with order is started without customer")	public void testDeliveryWithOrderStartedWithoutCustomer() throws IllegalStateException, NullPointerException, NoCustomerException {				StateOfOrderVO state = myOrderWithoutCustomer.getState();				myOrder.setState(StateOfOrderVO.CONFIRMED);		Exception exception = Assertions.assertThrows(NoCustomerException.class,				() -> services[1].startService(myOrderWithoutCustomer));		assertTrue(exception.getMessage().contains("No customer available."));		assertTrue(exception.getMessage().contains("Service of DeliveryManVO"));		assertEquals(state, myOrderWithoutCustomer.getState(), "state of order remains started");	}	@Test	@DisplayName("test delivery with order is StateOfOrderVO.CONFIRMED without customer")	public void testDeliveryWithOrderConfirmedWithoutCustomer() throws IllegalStateException, NullPointerException, NoCustomerException {				myOrderWithoutCustomer.setState(StateOfOrderVO.CONFIRMED);		Exception exception = Assertions.assertThrows(NoCustomerException.class,				() -> services[1].startService(myOrderWithoutCustomer));		assertTrue(exception.getMessage().contains("No customer available."));		assertTrue(exception.getMessage().contains("Service of DeliveryManVO"));		assertEquals(StateOfOrderVO.CONFIRMED, myOrderWithoutCustomer.getState(), "state of order remains confirmed");	}	@Test	@DisplayName("test delivery with order is confirmed with customer")	public void testDeliveryWithOrderConfirmedWithCustomer() throws IllegalStateException, NullPointerException, NoCustomerException {				myOrder.setState(StateOfOrderVO.CONFIRMED);		Exception exception = Assertions.assertThrows(IllegalStateException.class,				() -> services[1].startService(myOrder));		assertTrue(exception.getMessage().contains("No order is ready for processing."));		assertTrue(exception.getMessage().contains("Service of DeliveryManVO"));		assertEquals(StateOfOrderVO.CONFIRMED, myOrder.getState(), "state of order remains confirmed");	}	@Test	@DisplayName("test delivery there are at least 2 employees")	public void testDeliveryEmployees() {		EmployeeVO employees[];		employees = ((Delivery) services[1]).getEmployees();		assertTrue(employees.length >= 2, "At least 2 employees");		assertNotNull(employees[0], "Employee objects in arrray");		assertNotNull(employees[1], "Employee objects in arrray");	}	@Test	@DisplayName("test delivery methode selectEmployee is private")	public void testDeliverySelectEmployeeIsPrivate() throws NoSuchMethodException {		myDeliveryClass = Delivery.class;		selectEmployee = myDeliveryClass.getDeclaredMethod("selectEmployee");		modifiersSelectEmployee = selectEmployee.getModifiers();		assertTrue(Modifier.isPrivate(modifiersSelectEmployee), "Methode selectEmployee of Delivery is private");	}	@Test	@DisplayName("test delivery methode selectEmployee selects an employee and not null")	public void testDeliverySelectEmployee() throws NoSuchMethodException {		EmployeeVO employee;		myDeliveryClass = Delivery.class;		selectEmployee = myDeliveryClass.getDeclaredMethod("selectEmployee");		modifiersSelectEmployee = selectEmployee.getModifiers();		employee = (EmployeeVO) ReflectionSupport.invokeMethod(selectEmployee, (Delivery) services[1]);		assertNotNull(employee, "Employee objects of Delivery are selected");	}}